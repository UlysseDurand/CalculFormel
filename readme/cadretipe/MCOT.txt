Conception d'un interpréteur via un logiciel de calcul formel.

Il s'agit d'un projet sans se documenter, il a été réalisé juste avec les connaissances d'option informatique. Le but étant de redécouvrir par soi-même des concepts déjà existants
J'ai été ammené à réinventer ce dont j'avais besoin.
Je suis passé par la conception d'un language personnel représentant des motifs, un interpréteur de ce language, j'ai manipulé beaucoup d'automates en inventant des extensions de ces derniers, fais un parser de code LaTeX, et bien d'autres choses.

Ancrage  au thème de l’année :
Tous les programmes informatique de systèmes se voulant sécurisés (transaction, vote en ligne) font appel à des interpréteurs de code. En faisant un interpréteur soi-même, et en sachant qu'il ne contient pas de virus, il n'est pas le défaut de sécurité d'un système se voulant sécurisé.

Motivation du choix de l'étude :
Il s'agit d'un projet sans se documenter, le but étant de redécouvrir par soi-même des concepts déjà existants.
J'ai conçu un interpréteur d'un language personnel, donc un parser de code, implémenté des fonctionnalités de calcul, ou un compilateur vers LaTeX entre autres.

Positionnement thématique :
INFORMATIQUE (Informatique théorique)
INFORMATIQUE (Informatique Pratique)

Mots-clés :
Formal Calculation
Automaton
Pattern-matching
Compilation
Parser

Bibliographie commentée (Bibliographie à la fin):
Dans l'ensemble des outils permettant à un programme de fonctionner, il y en a un fondamental qui est l'interpréteur : il est indispensable pour comprendre l'ensemble des instructions que l'on souhaite faire faire au processeur. Comprendre via un programme informatique, le contenu d'un code dans un language, cela passe via un parser (analyseur syntaxique) qui dérive de l'idée de reconnaître des patterns dans une chaîne de caractères [2]. Pour se faire nous sommes passés par des automates bien particuliers, mais la méthode classique consiste par un autre type d'automate particulier, les automates à pile [1]. Ensuite une l'analyse syntaxique faite, il faut maintenant exploiter son résultat pour convertir notre chaîne de caractères en une autre forme (souvent en code C++, ou en Assembleur), cette traduction d'un language à un autre est faite par un compilateur [3].
A la fin, on a l'ensemble des éléments constituant un système traduisant un code dans un language haut niveau en un autre language plus bas niveau. Nous recréerons ces outils dans le cadre de la conception d'un logiciel de calcul formel.

Problématique :
Comment traiter du code dans un language ? Un assistant de calcul peut-il facilement communiquer avec un utilisateur ?

Objectifs :
-Arriver par le biais d'un logiciel de calcul formel à concevoir un parser, un interpréteur de LaTeX.
-Concevoir un compilateur vers LaTeX.
-Développer des fonctionnalités sur les expressions algébriques (évaluation, dérivation).



BIBLIOGRAPHIE :
AUTOMATES A PILE : Langages formels, calculabilité et complexité
Olivier Carton
28 octobre 2008

PARSER : (en) Dick Grune (en), Ceriel J.H. Jacobs, Parsing Techniques - A Practical Guide [archive], Ellis Horwood, Chichester, England, 1990

COMPILATEUR : (en) Alfred V. Aho, Ravi Sethi, Jeffrey D. Ullman, Compilers: Principles, Techniques, and Tools, Addison Wesley Publishing Company, 1986.

INTERESSANT : (en) Erik Meijer, Maarten Fokkinga et Ross Paterson, « Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire », CiteSeerX,‎ 1991
